# Type a grammar here:

Sx -> A_aug ; Sx.
Sx -> A_sim ; Sx.
Sx -> A_aug ;.
Sx -> A_sim ;.
Sx -> A_dro ;.
Sx -> Ctrl Sx.
Sx -> Ctrl.
Sx -> Fun ; Sx.
Sx -> Fun ;.

A_aug -> ID Ao Ex.
A_sim -> ID = Ex.
A_sim -> ID = Dc.

Ao -> +=.
Ao -> -=.
Ao -> *=.
Ao -> /=.
Ao -> %=.
Ao -> >>=.
Ao -> <<=.
Ao -> &=.
Ao -> o=.
Ao -> ^=.
Ao -> **=.

Ex -> Or_l.

#Parte comparaciones lógicas
Or_l -> Or_l oo And_l.
Or_l -> And_l.
 
And_l -> And_l && Not_l.
And_l -> Not_l.

Not_l -> ! Not_l.
Not_l -> Lx.

Lx -> Lx Lo Or_b.
Lx -> Or_b.

Lo -> <.
Lo -> >.
Lo -> <=.
Lo -> >=.
Lo -> ==.
Lo -> !=.

#Parte de operaciones binarias
Or_b -> Or_b o Xor_b.
Or_b -> Xor_b.

Xor_b -> Xor_b ^ And_b.
Xor_b -> And_b.

And_b -> And_b & Shift.
And_b -> Shift.

Shift -> Shift >> Ax.
Shift -> Shift << Ax.
Shift -> Ax.

#Parte aritmética

Ax -> Ax + Af.
Ax -> Ax - Af.
Ax -> Af.

Af -> Af * Ap.
Af -> Af % Ap.
Af -> Af / Ap.
Af -> Ap.

Ap -> At ** Ap.
Ap -> At.

At -> Si NUMBER.
At -> STRING.
At -> Si ID.
At -> Si ( Ex ).
At -> poi ( Lla ).
At -> list ( Par ).
At -> input ( Eps ).

Par -> Ex Pas.
Par -> .

Pas -> , Ex Pas.
Pas -> .

Si -> Si +.
Si -> Si -.
Si -> Si ~.
Si -> .

#Comandos Drone
Dc -> drone ( STRING , Ex ).

Lla -> Ex , Ex , Ex.

# Drone Functions
Fun -> move_to ( ID , Lla ).
Fun -> rotate ( ID , Lla ).
Fun -> print ( Eps ).
Fun -> speed ( ID , Ex ).
Fun -> mission ( ID , Ex ).

#Ctrl statement
Ctrl -> For.
Ctrl -> While.
Ctrl -> If.

#For & while loops
For -> for ( ID : Ex , Ex , Ex ) { Sx }.
While -> while ( Ex ) { Sx }.

#If statement
If -> if ( Ex ) { Sx } El.
El -> else { Sx }.
El -> elif ( Ex ) { Sx } El.
El -> .

Eps -> Ex.
Eps -> .

Dc -> connect ( STRING ).
Dc -> drone ( ID , ID ).

At -> BOOLEAN.