grammarPattern = r"""
(?P<droneDeclarationStart>=\*\*\()
|(?P<droneDelcarationEnd>\)\*\*)
|(?P<moveDeclaration>-<)
|(?P<rotateDeclaration>-\))
|(?P<leftCurly>[{])
|(?P<rightCurly>[}])
|(?P<leftBracket>[(])
|(?P<rightBracker>[)])
|(?P<orDetected>[o])
|(?P<nonTerminal>(Sx|A_aug|A_sim|A_dro|Ao|Ex|Or_l|And_l|Not_l|Lx|Lo|Or_b|Xor_b|And_b|Shift|Ax|Af|Ap|At|Si|Dc|Ctrl|For|While|If))
|(?P<endStatement>[;])
|(?P<identifier>ID)
|(?P<updater>(\+=|-=|\*=|/=|%=|>>=|<<=|&=|\|=|\^=|\*\*=))
|(?P<comparatorLarger>(<=|>=|==|!=))
|(?P<operatorLarger>(\|\| | && | \*\*))
|(?P<operator>(\+ | - | ~ | \* | % | / | >> | << | & | \| | \^ | !))
|(?P<comparator>(< | >))
|(?P<number>NUMBER)
|(?P<string>STRING)
|(?P<epsilon>\#)
|(?P<reservedWord>(while|if|for|else))
|(?P<whitespace>\s+)
|(?P<twoDots>[:])
|(?P<comma>[,])
|(?P<equal>[=])
"""