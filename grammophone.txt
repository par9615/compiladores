# Type a grammar here:

Sm -> At a Sm | Ct Sm | Ct | At.
At -> An.
At -> As.
At -> Ab.
At -> Au.
At -> Al.
At -> Ad.
Au -> ID Oa Nx.
Au -> ID Oa Bi.
Au -> ID Oa Sx.
Au -> ID Oa Lx.
An -> ID = Nx.
An -> ID = Bi.
As -> ID = Sx.
Al -> ID = Pl.
Ab -> ID = Lx.
Nx -> Nx + Nf.
Nx -> Nx - Nf.
Nx -> Nf.
Nf -> Nf * Nt.
Nf -> Nf / Nt.
Nf -> Nt.
Nt -> Nt ** Nx.
Nt -> sqrt( Nx ).
Nt -> ( Nx ).
Nt -> Nt ++.
Nt -> Nt --.
Nt -> ++ Nt.
Nt -> -- Nt.
Nt -> int.
Nt -> float.
Bi -> Bi & Bf.
Bi -> Bi o Bf.
Bi -> Bi ^ Bf.
Bi -> Bi >> Bf.
Bi -> Bi << Bf.
Bi -> Bf.
Bf -> ( Bf ).
Bf -> int.
Sx -> Sx + Sf | Sf.
Sf -> Sx * Nx.
Sf -> string.
Lx -> Lx && Lf.
Lx -> Lx oo Lf.
Lx -> Lf.
Lf -> ! Lf.
Lf -> Lf < Lt.
Lf -> Lf > Lt.
Lf -> Lf <= Lt.
Lf -> Lf >= Lt.
Lf -> Lf == Lt.
Lf -> Lf != Lt.
Lf -> Lt.
Lt -> true.
Lt -> false.
Lt -> Nx.
Lt -> Sx.
Oa -> +=.
Oa -> -=.
Oa -> *=.
Oa -> /=.
Oa -> >>=.
Oa -> <<=.
Ex -> Nx.
Ex -> Lx.
Ex -> Bi.
Ex -> Sx.
Ex -> Pl.
Ex -> ID.
Pv -> Ex.
Pv -> Pv , Ex.
Pl -> list( Pv ).
Pl -> list().
Fu -> Au.
Fc -> Lx.
Fi -> As.
Fr -> for( Fi ; Fc ; Fu ){ Sm }.
Fr -> for( ID , int , int ){ Sm }.
Wh -> while( Lx ){ Sm }.
Ct -> If.
Ct -> Wh.
Ct -> Fr.
If -> if( Lx ){ Sm }.
If -> if( Lx ){ Sm } Es.
If -> if( Lx ){ Sm } Ei.
If -> if( Lx ){ Sm } EiEs.
Es -> else{ Sm }.
Ei -> elif( Lx ){ Sm }.
Ei -> elif( Lx ){ Sm } Ei.
Ad -> ID = Dx.
Dx -> Drone().
Dx -> Drone( Nx , Nx, Mx ).
Dx -> Drone( Nx, Nx ).
Mx -> stable.
Mx -> guided.
